{"version":3,"sources":["assets/logo.png","components/GlobalStyle.ts","components/Card/CardTile.tsx","components/Card/Card.styled.ts","components/Card/Card.tsx","components/Card/index.ts","App.styled.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","createGlobalStyle","css","CardTile","src","alt","width","Container","styled","div","Content","Title","images","id","download_url","Card","title","map","image","key","require","height","App","GlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,8VCE5BC,kBAAf,IAAmCC,YAAnC,MCUeC,EANE,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACf,6BACE,yBAAKA,IAAKA,EAAKC,IAAI,OAAOC,MAAM,W,yeCN7B,IAAMC,EAAYC,IAAOC,IAAV,KAKTC,EAAUF,IAAOC,IAAV,KAKPE,EAAQH,IAAOC,IAAV,KCFZG,EAAS,CACb,CAAEC,GAAI,IAAKC,aAAc,8CACzB,CAAED,GAAI,IAAKC,aAAc,8CACzB,CAAED,GAAI,KAAMC,aAAc,+CAC1B,CAAED,GAAI,IAAKC,aAAc,+CCbZC,EDoBF,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MACd,OACE,kBAACT,EAAD,KACE,kBAACG,EAAD,KACGE,EAAOK,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,CAAUC,IAAKD,EAAML,GAAIT,IAAKc,EAAMJ,mBAGvCE,GACC,kBAACL,EAAD,KACE,yBAAKP,IAAKgB,EAAQ,IAA0BC,OAAO,SADrD,IACgEL,K,8KE7BjE,IAAMT,EAAYC,IAAOC,IAAV,KCcPa,EAXH,WACV,OACE,oCACE,kBAACC,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMP,MAAM,qBCEAQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.20d51265.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2a3f011a.png\";","import { createGlobalStyle, css } from \"styled-components\";\n\nexport default createGlobalStyle`${css`\n  html,\n  body,\n  #root {\n    padding: 0px;\n    margin: 0px;\n    width: 100vw;\n    height: 100vh;\n  }\n`}`;\n","import React from \"react\";\n\ninterface Props {\n  src: string;\n}\n\nconst CardTile = ({ src }: Props) => (\n  <div>\n    <img src={src} alt=\"tile\" width=\"100%\" />\n  </div>\n);\n\nexport default CardTile;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: inline-block;\n  position: relative;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const Title = styled.div`\n  display: flex;\n  position: absolute;\n  bottom: 10px;\n  width: 100%;\n  height: 30%;\n  background: rgba(0, 0, 0, 0.3);\n  color: white;\n  align-items: center;\n  font-size: 4vw;\n`;\n","import React, { useState, useEffect } from \"react\";\nimport CardTile from \"./CardTile\";\nimport { Content, Container, Title } from \"./Card.styled\";\nimport { S_IFDIR } from \"constants\";\n\ntype ImageType = {\n  id: string;\n  download_url: string;\n};\n\nconst images = [\n  { id: 244, download_url: \"https://i.picsum.photos/id/244/200/300.jpg\" },\n  { id: 802, download_url: \"https://i.picsum.photos/id/802/200/300.jpg\" },\n  { id: 1042, download_url: \"https://i.picsum.photos/id/1042/200/300.jpg\" },\n  { id: 827, download_url: \"https://i.picsum.photos/id/827/200/300.jpg\" },\n];\n\ninterface Props {\n  title?: string;\n}\n\nconst Card = ({ title }: Props) => {\n  return (\n    <Container>\n      <Content>\n        {images.map(image => (\n          <CardTile key={image.id} src={image.download_url} />\n        ))}\n      </Content>\n      {title && (\n        <Title>\n          <img src={require(\"../../assets/logo.png\")} height=\"100%\" /> {title}\n        </Title>\n      )}\n    </Container>\n  );\n};\n\nexport default Card;\n","import Card from \"./Card\";\nexport default Card;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`;\n","import React from \"react\";\nimport GlobalStyle from \"./components/GlobalStyle\";\nimport Card from \"./components/Card\";\nimport { Container } from \"./App.styled\";\n\nconst App = () => {\n  return (\n    <>\n      <GlobalStyle />\n      <Container>\n        <Card title=\"Home and away\" />\n      </Container>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}